# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  schedule:
  - cron: 0 0 1 * *
  

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-Windows:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4.1.0

      # Runs a single command using the runners shell
      - name: Install pip
        run: pip install -r requirements.txt

      # Runs a set of commands using the runners shell
      - name: Pyinstaller
        run: |
          pyinstaller init.py -i icon.ico --onefile --noconsole --add-data "assets;assets"
          ren ./dist/init.exe "HT-Music-Downloader-Windows.exe"
          Compress-Archive -Path .\dist 'HT-Music-Downloader-Windows.zip'
      - name: Automatic Releases
        id: Release-Win
        uses: marvinpinto/action-automatic-releases@v1.2.1
        with:
          # GitHub secret token
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          # Should this release be marked as a draft?
          draft: false
          # Should this release be marked as a pre-release?
          prerelease: true # optional, default is true
          # Release title (for automatic releases)
          title: '4.0 Dev - ${{ steps.date.outputs.today }}'
          # Assets to upload to the release
          files: ./dist
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          # Artifact name
          name: Windows
          # A file, directory or wildcard pattern that describes what to upload
          path: dist/
  build-MacOS:
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4.1.0

      # Runs a single command using the runners shell
      - name: Install pip
        run: pip install -r requirements.txt

      # Runs a set of commands using the runners shell
      - name: Pyinstaller
        run: |
          pyinstaller init.py -i icon.ico --onefile --noconsole --add-data "assets:assets"
          ren ./dist/init "HT-Music-Downloader-MacOS"
          Compress-Archive -Path .\dist 'HT-Music-Downloader-MacOS.zip'
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          # Artifact name
          name: Macos
          # A file, directory or wildcard pattern that describes what to upload
          path: dist/
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ jobs.build-Windows.steps.Release-Win.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./dist/
          asset_name: HT-Music-Downloader-MacOS.zip
          asset_content_type: application/zip
          
  build-Linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4.1.0

      # Runs a single command using the runners shell
      - name: Install pip
        run: pip install -r requirements.txt

      # Runs a set of commands using the runners shell
      - name: Pyinstaller
        run: |
          pyinstaller init.py -i icon.ico --onefile --noconsole --add-data "assets:assets"
          ren ./dist/init "HT-Music-Downloader-Linux"
          Compress-Archive -Path .\dist 'HT-Music-Downloader-Linux.zip'
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          # Artifact name
          name: Linux
          # A file, directory or wildcard pattern that describes what to upload
          path: dist/
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ jobs.build-Windows.steps.Release-Win.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./dist/
          asset_name: HT-Music-Downloader-Linux.zip
          asset_content_type: application/zip
